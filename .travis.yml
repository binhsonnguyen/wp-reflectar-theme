language: minimal

services:
  - docker

jobs:
  include:
  - stage: build
    script:
      - cd src
      - docker run --rm -v "$PWD":/app -w /app node:lts npm install
      - docker run --rm -v "$PWD":/app -w /app node:lts npm run lint:scss
      - docker run --rm -v "$PWD":/app -w /app node:lts npm run lint:js
      - docker run --rm -v "$PWD":/app -w /app node:lts npm run compile:css
      - docker run --rm -v "$PWD":/app -w /app node:lts npm run compile:rtl
      - docker run --rm -v "$PWD":/app -w /app composer install
      - docker run --rm -v "$PWD":/app -w /app composer lint:wpcs
      - docker run --rm -v "$PWD":/app -w /app composer lint:php
  - stage: deploy
    branches:
      only:
      - master
    before_script:
      - which ssh-agent || ( apt update -y && apt install -y openssh-client )
      - eval $(ssh-agent -s)
      - openssl aes-256-cbc -K $encrypted_e6cc0fb2b8da_key -iv $encrypted_e6cc0fb2b8da_iv -in production_deploy_key.enc -out production_deploy_key -d
      - chmod 600 production_deploy_key
      - ssh-add production_deploy_key
      - openssl aes-256-cbc -K $encrypted_dd65c1b4b3e6_key -iv $encrypted_dd65c1b4b3e6_iv -in production_public_key.enc -out production_public_key -d
      - cat production_public_key >> ~/.ssh/known_hosts
    script:
      - ssh $PRODUCTION_USER@$PRODUCTION_SERVER "/bin/bash -s " < production_deploy.sh